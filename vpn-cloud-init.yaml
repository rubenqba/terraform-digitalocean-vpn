#cloud-config
package_upgrade: true
package_reboot_if_required: true

packages:
  - ca-certificates
  - wget
  - net-tools
  - gnupg
  - strongswan
  - libcharon-extra-plugins
  - libcharon-extauth-plugins
  - libstrongswan-extra-plugins
  - haproxy

users:
  - name: vpn
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIDl7ai7a3TWPlmJeRRpeDRUCIBp7MrQTGPv5cuL4Ce5iqNav7CHNRHV2Sm8cHYkEKKAU25YrfspJGRULYQNDBwgUCEpGXlzRKnYRi9DGf72VTtVi6GVO3wQRxJp3PGKb8Uoy494mot0uHhIWrKsZF47JWV5IPrDsRJavanIhEtI7PA/lRnI6TxluyQAtfeIgsMPcwRbTWr2Lfgf29YRZUz7spI/+CMAZT7TT5M8jGO+NoF//tzC3xTyC6+pBc2AjUNLsh5RNP88iRgHMGKO3Sa+u5V5+qRUHcgo7VZtJ4VaY03ujgRVITXMkY78Oznoc8mXgUCBPq8kLsa7Q9tTZ/ rbresler@qba-pc
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    groups: sudo
    shell: /bin/bash

write_files:
  - path: /etc/sysctl.conf
    append: true
    content: |
      # IPsec
      net.ipv4.ip_forward = 1
      net.ipv4.conf.all.send_redirects = 0
      net.ipv4.conf.all.accept_redirects = 0

  - path: /etc/haproxy/conf.d/00-resolvers.cfg
    append: true
    content: |
      #
      # DigitalOcean DNS resolvers
      #
      resolvers digitalocean
        nameserver ns1 173.245.58.51:53
        nameserver ns2 173.245.59.41:53
        nameserver ns3 198.41.222.173:53
      #

  - path: /etc/haproxy/conf.d/01-webhooks.cfg
    append: true
    content: |
      #
      # Webhooks redirection
      #
      frontend webhooks-frontend
        bind PRIVATE_IPV4:8000
        mode http
        default_backend webhooks-backend
        http-request set-header Host '${webhooks_endpoint}'

      backend webhooks-backend
        balance roundrobin
        server webhooks-dev ${webhooks_endpoint}:${webhooks_port} ssl verify none check resolvers digitalocean
      #

  - path: /root/setup-haproxy.sh

  - path: /etc/ipsec.d/secrets/ipsec.secrets.tpl
    content: |
      # IPsec config
      $${local_id} $${remote_id} : PSK $${pre_shared_key}

  - path: /etc/ipsec.d/conf/ipsec.conf.tpl
    content: |
      config setup
        charondebug="ike 2, knl 2, cfg 2, net 2, esp 2, dmn 2, mgr 2"
        cachecrls=no
        strictcrlpolicy=yes
        uniqueids = yes

      # Add connections here.
      conn $${vpn_name}
        ikelifetime=8h
        keylife=20m
        rekeymargin=1h
        keyingtries=1
        authby=psk
        keyexchange=ikev2
        dpdaction=restart
        $${phase1_encryption}
        $${phase2_encryption}
        leftid=$${local_id}
        left=$${local_public_ip}
        leftsubnet=$${local_private_subnet}
        leftsendcert=never
        rightid=$${remote_id}
        right=$${remote_public_address}
        rightsubnet=$${remote_subnet}
        rightsendcert=never
    permissions: 0755
    content: |
      #!/bin/bash 

      # Configure HAProxy
      sed -i -e "s/PRIVATE_IPV4/$PRIVATE_IPV4/" /etc/haproxy/conf.d/01-webhooks.cfg
      cat /etc/haproxy/conf.d/*.cfg >> /etc/haproxy/haproxy.cfg
      haproxy -c -f /etc/haproxy/haproxy.cfg && systemctl restart haproxy
      
        auto=start
  - path: /root/setup-vpn.sh
    permissions: 0755
    content: |
      #!/bin/bash

      while getopts ":n:i:r:a:s:k:e:d:" o; do
        case "$${o}" in
          n)
            export vpn_name=$${OPTARG}
            ;;
          i)
            export local_id=$${OPTARG}
            ;;
          r)
            export remote_id=$${OPTARG}
            ;;
          a)
            export remote_public_address=$${OPTARG}
            ;;
          s)
            export remote_subnet=$${OPTARG}
            ;;
          k)
            export pre_shared_key=$${OPTARG}
            ;;
          e)
            export phase1_encryption=$${OPTARG}
            ;;
          d)
            export phase2_encryption=$${OPTARG}
            ;;
          *)
            usage
            ;;
        esac
      done
      shift $((OPTIND-1))

      if [ -z "$${n}" ] || [ -z "$${a}" ] || [ -z "$${s}" ]; then
        usage
      fi

      export local_hostname=$(curl -s http://169.254.169.254/metadata/v1/hostname)
      export local_public_ip=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)
      export local_private_ip=$(curl -s http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address)
      export local_private_subnet="$${local_private_ip}/32"

      envsubst < /etc/ipsec.d/secrets/ipsec.secrets.tpl > /etc/ipsec.d/secrets/ipsec.$${vpn_name}.secrets
      envsubst < /etc/ipsec.d/conf/ipsec.conf.tpl > /etc/ipsec.d/conf/ipsec.$${vpn_name}.conf

      cat << EOF >> /etc/ipsec.secrets
      include /etc/ipsec.d/secrets/ipsec.$${vpn_name}.secrets
      EOF
      cat << EOF >> /etc/ipsec.conf
      include /etc/ipsec.d/conf/ipsec.$${vpn_name}.conf
      EOF

      systemctl restart strongswan-starter

      # Firewall configuration
      ufw allow proto esp from $${remote_public_address}
      ufw allow from $${remote_subnet} proto tcp to $${local_private_ip} port 8000

      echo "finish setup"


runcmd:
  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config
  - sed -i -e '$aAllowUsers vpn' /etc/ssh/sshd_config
  - service ssh restart
  - ufw allow OpenSSH
  - ufw allow 500,4500/udp
  - ufw enable
  - /root/setup-haproxy.sh
  - ${enable_provision} && /root/setup-vpn.sh -n '${vpn_name}' -a '${remote_public_address}' -s '${remote_subnet}' -k '${pre_shared_key}' -e '${phase1_encryption}' -d '${phase2_encryption}'

final_message: cloud-init configuration completed!
